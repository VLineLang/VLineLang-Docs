import{_ as s,c as n,o as e,ae as i}from"./chunks/framework.Dh1jimFm.js";const u=JSON.parse('{"title":"标准库","description":"","frontmatter":{},"headers":[],"relativePath":"guide/stdlib.md","filePath":"guide/stdlib.md"}'),t={name:"guide/stdlib.md"};function p(l,a,o,r,d,c){return e(),n("div",null,a[0]||(a[0]=[i(`<h1 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h1><p>本章节介绍VLineLang的标准库，包含了语言内置的函数和工具。</p><h2 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h2><h3 id="print-函数" tabindex="-1">print 函数 <a class="header-anchor" href="#print-函数" aria-label="Permalink to &quot;print 函数&quot;">​</a></h3><p>用于输出内容到控制台：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 基本输出</span></span>
<span class="line"><span>print(&quot;Hello, VLineLang!&quot;)  // 输出字符串</span></span>
<span class="line"><span>print(42)                   // 输出数字</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 多值输出</span></span>
<span class="line"><span>name = &quot;VLine&quot;</span></span>
<span class="line"><span>age = 1</span></span>
<span class="line"><span>print(&quot;名字：&quot;, name, &quot;年龄：&quot;, age)</span></span></code></pre></div><h3 id="input-函数" tabindex="-1">input 函数 <a class="header-anchor" href="#input-函数" aria-label="Permalink to &quot;input 函数&quot;">​</a></h3><p>从控制台读取用户输入：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 读取字符串</span></span>
<span class="line"><span>name = input(&quot;请输入你的名字：&quot;)</span></span>
<span class="line"><span>print(&quot;你好，&quot; + name)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 读取数字（需要类型转换）</span></span>
<span class="line"><span>age_str = input(&quot;请输入你的年龄：&quot;)</span></span>
<span class="line"><span>age = number(age_str)</span></span>
<span class="line"><span>print(&quot;明年你&quot; + str(age + 1) + &quot;岁&quot;)</span></span></code></pre></div><h2 id="列表操作" tabindex="-1">列表操作 <a class="header-anchor" href="#列表操作" aria-label="Permalink to &quot;列表操作&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>可以使用 <code>import &quot;StdList&quot;</code> 导入列表标准库（确保其文件存在并且在当前文件夹下），并使用 <code>l = new List()</code> 来初始化一个列表，在以下例子中，使用 <code>numbers = new List()</code> 来初始化。</p></div><h3 id="len-函数" tabindex="-1">len 函数 <a class="header-anchor" href="#len-函数" aria-label="Permalink to &quot;len 函数&quot;">​</a></h3><p>获取列表长度：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>numbers = [1, 2, 3, 4, 5]</span></span>
<span class="line"><span>size = len(numbers)  // StdList 等价方法：size = numbers.size()</span></span>
<span class="line"><span>print(size)  // 输出: 5</span></span></code></pre></div><h3 id="append-函数" tabindex="-1">append 函数 <a class="header-anchor" href="#append-函数" aria-label="Permalink to &quot;append 函数&quot;">​</a></h3><p>在列表末尾添加元素：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>numbers = [1, 2, 3]</span></span>
<span class="line"><span>numbers = append(numbers, 4)  // StdList 等价方法：numbers.append(4)</span></span>
<span class="line"><span>print(numbers)  // 输出: [1, 2, 3, 4]</span></span></code></pre></div><h3 id="erase-函数" tabindex="-1">erase 函数 <a class="header-anchor" href="#erase-函数" aria-label="Permalink to &quot;erase 函数&quot;">​</a></h3><p>删除指定位置 <code>[begin, end)</code> 的元素：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>numbers = [1, 2, 3, 4, 5]</span></span>
<span class="line"><span>numbers = erase(numbers, 2, 3)  // 删除索引2的元素，StdList 等价方法：numbers.erase(2, 3)</span></span>
<span class="line"><span>print(numbers)    // 输出: [1, 2, 4, 5]</span></span></code></pre></div><h3 id="insert-函数" tabindex="-1">insert 函数 <a class="header-anchor" href="#insert-函数" aria-label="Permalink to &quot;insert 函数&quot;">​</a></h3><p>在指定位置插入元素：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>numbers = [1, 2, 4, 5]</span></span>
<span class="line"><span>numbers = insert(numbers, 2, 3)  // 在索引2处插入3，StdList 等价方法：numbers.insert(2, 3)</span></span>
<span class="line"><span>print(numbers)       // 输出: [1, 2, 3, 4, 5]</span></span></code></pre></div><h3 id="empty-函数-仅-stdlist-支持" tabindex="-1">empty 函数（仅 StdList 支持） <a class="header-anchor" href="#empty-函数-仅-stdlist-支持" aria-label="Permalink to &quot;empty 函数（仅 StdList 支持）&quot;">​</a></h3><p>检查列表是否为空：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>numbers = new List()</span></span>
<span class="line"><span>is_empty = numbers.empty()</span></span>
<span class="line"><span>print(is_empty)  // 输出: 1</span></span></code></pre></div><h2 id="类型操作" tabindex="-1">类型操作 <a class="header-anchor" href="#类型操作" aria-label="Permalink to &quot;类型操作&quot;">​</a></h2><h3 id="type-函数" tabindex="-1">type 函数 <a class="header-anchor" href="#type-函数" aria-label="Permalink to &quot;type 函数&quot;">​</a></h3><p>获取值的类型：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(type(42))        // 输出: number</span></span>
<span class="line"><span>print(type(&quot;VLine&quot;))   // 输出: string</span></span>
<span class="line"><span>print(type([1, 2, 3])) // 输出: list</span></span></code></pre></div><h3 id="str-函数" tabindex="-1">str 函数 <a class="header-anchor" href="#str-函数" aria-label="Permalink to &quot;str 函数&quot;">​</a></h3><p>将值转换为字符串：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>x = 42</span></span>
<span class="line"><span>s = str(x)</span></span>
<span class="line"><span>print(type(s))  // 输出: string</span></span></code></pre></div><h3 id="number-函数" tabindex="-1">number 函数 <a class="header-anchor" href="#number-函数" aria-label="Permalink to &quot;number 函数&quot;">​</a></h3><p>将字符串转换为数字：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>s = &quot;42&quot;</span></span>
<span class="line"><span>n = number(s)</span></span>
<span class="line"><span>print(type(n))  // 输出: number</span></span></code></pre></div><h3 id="list-函数" tabindex="-1">list 函数 <a class="header-anchor" href="#list-函数" aria-label="Permalink to &quot;list 函数&quot;">​</a></h3><p>创建列表：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 字符串转列表</span></span>
<span class="line"><span>s = &quot;VLine&quot;</span></span>
<span class="line"><span>chars = list(s)</span></span>
<span class="line"><span>print(chars)  // 输出: [V, L, i, n, e]</span></span></code></pre></div><h2 id="数学函数" tabindex="-1">数学函数 <a class="header-anchor" href="#数学函数" aria-label="Permalink to &quot;数学函数&quot;">​</a></h2><h3 id="floor-函数" tabindex="-1">floor 函数 <a class="header-anchor" href="#floor-函数" aria-label="Permalink to &quot;floor 函数&quot;">​</a></h3><p>向下取整：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(floor(3.7))  // 输出: 3</span></span>
<span class="line"><span>print(floor(-3.7)) // 输出: -3</span></span></code></pre></div><h3 id="ceil-函数" tabindex="-1">ceil 函数 <a class="header-anchor" href="#ceil-函数" aria-label="Permalink to &quot;ceil 函数&quot;">​</a></h3><p>向上取整：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(ceil(3.7))  // 输出: 4</span></span>
<span class="line"><span>print(ceil(-3.7)) // 输出: -2</span></span></code></pre></div><h3 id="abs-函数" tabindex="-1">abs 函数 <a class="header-anchor" href="#abs-函数" aria-label="Permalink to &quot;abs 函数&quot;">​</a></h3><p>计算绝对值：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(abs(42))   // 输出: 42</span></span>
<span class="line"><span>print(abs(-42))  // 输出: 42</span></span></code></pre></div><h3 id="pow-函数" tabindex="-1">pow 函数 <a class="header-anchor" href="#pow-函数" aria-label="Permalink to &quot;pow 函数&quot;">​</a></h3><p>计算幂：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(pow(2, 3))  // 输出: 8</span></span>
<span class="line"><span>print(pow(3, 2))  // 输出: 9</span></span></code></pre></div><h3 id="round-函数" tabindex="-1">round 函数 <a class="header-anchor" href="#round-函数" aria-label="Permalink to &quot;round 函数&quot;">​</a></h3><p>四舍五入：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(round(3.4))  // 输出: 3</span></span>
<span class="line"><span>print(round(3.6))  // 输出: 4</span></span></code></pre></div><h3 id="sqrt-函数" tabindex="-1">sqrt 函数 <a class="header-anchor" href="#sqrt-函数" aria-label="Permalink to &quot;sqrt 函数&quot;">​</a></h3><p>计算平方根：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(sqrt(16))  // 输出: 4</span></span>
<span class="line"><span>print(sqrt(2))   // 输出: 1.4142135623730950488</span></span></code></pre></div><h2 id="系统函数" tabindex="-1">系统函数 <a class="header-anchor" href="#系统函数" aria-label="Permalink to &quot;系统函数&quot;">​</a></h2><h3 id="sleep-函数" tabindex="-1">sleep 函数 <a class="header-anchor" href="#sleep-函数" aria-label="Permalink to &quot;sleep 函数&quot;">​</a></h3><p>暂停执行指定的毫秒数：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(&quot;开始&quot;)</span></span>
<span class="line"><span>sleep(2000)  // 暂停2000毫秒/2秒</span></span>
<span class="line"><span>print(&quot;结束&quot;)</span></span></code></pre></div><h3 id="system-函数" tabindex="-1">system 函数 <a class="header-anchor" href="#system-函数" aria-label="Permalink to &quot;system 函数&quot;">​</a></h3><p>执行系统命令：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>system(&quot;ls&quot;)  // 在类Unix系统中列出文件</span></span>
<span class="line"><span>system(&quot;dir&quot;) // 在Windows中列出文件</span></span></code></pre></div><h3 id="exit-函数" tabindex="-1">exit 函数 <a class="header-anchor" href="#exit-函数" aria-label="Permalink to &quot;exit 函数&quot;">​</a></h3><p>退出程序：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>print(&quot;程序开始&quot;)</span></span>
<span class="line"><span>exit(0)  // 程序结束，返回0</span></span>
<span class="line"><span>print(&quot;这行不会执行&quot;)</span></span></code></pre></div><h3 id="time-函数" tabindex="-1">time 函数 <a class="header-anchor" href="#time-函数" aria-label="Permalink to &quot;time 函数&quot;">​</a></h3><p>获取当前时间戳：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>t = time()</span></span>
<span class="line"><span>print(t)  // 输出当前时间戳</span></span></code></pre></div><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><h3 id="read-函数" tabindex="-1">read 函数 <a class="header-anchor" href="#read-函数" aria-label="Permalink to &quot;read 函数&quot;">​</a></h3><p>读取文件内容：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 读取整个文件</span></span>
<span class="line"><span>content = read(&quot;test.txt&quot;)</span></span>
<span class="line"><span>print(content)</span></span></code></pre></div><h3 id="write-函数" tabindex="-1">write 函数 <a class="header-anchor" href="#write-函数" aria-label="Permalink to &quot;write 函数&quot;">​</a></h3><p>写入文件内容：</p><div class="language-vline vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vline</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 写入文件</span></span>
<span class="line"><span>write(&quot;test.txt&quot;, &quot;Hello, VLineLang!&quot;)</span></span></code></pre></div><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><p><strong>错误处理</strong></p><ul><li>检查函数返回值</li><li>适当处理异常情况</li><li>提供用户友好的错误信息</li></ul></li><li><p><strong>资源管理</strong></p><ul><li>及时关闭打开的文件</li><li>合理使用系统资源</li><li>避免资源泄漏</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>选择合适的函数</li><li>避免不必要的类型转换</li><li>合理使用系统函数</li></ul></li></ol>`,80)]))}const b=s(t,[["render",p]]);export{u as __pageData,b as default};
